generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String
  email              String               @unique
  password           String
  role               String               @default("Personal")
  verified           Boolean              @default(false)
  verificationToken  String?
  ownedHousehold     Household? // One user can own one household
  accounts           Account[] // Establish a one-to-many relationship with Account
  PasswordResetToken PasswordResetToken[]
  BudgetCategory     BudgetCategory[]
  HouseholdMember    HouseholdMember[]
  HouseholdAccount   HouseholdAccount[]
  SavingsGoal        SavingsGoal[]
  IncomeAllocation   IncomeAllocation[]
  Notification       Notification[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @db.Timestamptz()
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

// Define the Account model
model Account {
  id               Int                @id @default(autoincrement())
  account_name     String
  account_number   String
  total_balance    Float
  user_id          Int
  user             User               @relation(fields: [user_id], references: [id]) // Define the relationship with User
  transactions     Transaction[] // Establish a one-to-many relationship with Transaction
  HouseholdAccount HouseholdAccount[]
}

// Define the Transaction model
model Transaction {
  id               Int             @id @default(autoincrement())
  date             DateTime        @db.Timestamptz()
  amount           Float
  type             String
  budgetCategory   String?
  description      String?
  account_id       Int
  account          Account         @relation(fields: [account_id], references: [id]) // Define the relationship with Account
  BudgetCategory   BudgetCategory? @relation(fields: [budgetCategoryId], references: [id])
  budgetCategoryId Int?
}

model BudgetCategory {
  id             Int           @id @default(autoincrement())
  budgetCategory String
  amount         Float
  user_id        Int // Reference the User
  user           User          @relation(fields: [user_id], references: [id])
  transactions   Transaction[] // Establish a relationship with Transaction
}

model SavingsGoal {
  id           Int                   @id @default(autoincrement())
  name         String
  targetAmount Float
  dueDate      DateTime              @db.Timestamptz()
  user         User                  @relation(fields: [userId], references: [id])
  userId       Int
  progress     SavingsGoalProgress[]
  allocation   IncomeAllocation[]
}

// Records progress toward savings goals over time.
model SavingsGoalProgress {
  id            Int         @id @default(autoincrement())
  savingsGoalId Int
  amount        Float
  date          DateTime    @db.Timestamptz()
  savingGoal    SavingsGoal @relation(fields: [savingsGoalId], references: [id])
}

// Stores income allocation percentages for each savings goal.
model IncomeAllocation {
  id                   Int         @id @default(autoincrement())
  allocationPercentage Float
  user                 User        @relation(fields: [userId], references: [id])
  savingsGoal          SavingsGoal @relation(fields: [savingsGoalId], references: [id])
  userId               Int
  savingsGoalId        Int
}

// Stores predefined savings goals available in the marketplace.
model MarketplaceGoal {
  id                  Int    @id @default(autoincrement())
  name                String
  description         String
  defaultTargetAmount Float?
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  timestamp DateTime @db.Timestamptz()
  seen      Boolean
  user      User     @relation(fields: [userId], references: [id])
}

model Household {
  id               Int                @id @default(autoincrement())
  ownerUser        User               @relation(fields: [ownerUserId], references: [id])
  ownerUserId      Int                @unique
  HouseholdMember  HouseholdMember[]
  joiningId        String
  HouseholdAccount HouseholdAccount[]
}

model HouseholdMember {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  household   Household @relation(fields: [householdId], references: [id])
  householdId Int
}

model HouseholdAccount {
  id           Int       @id @default(autoincrement())
  bank_account Account   @relation(fields: [accountId], references: [id])
  household    Household @relation(fields: [householdId], references: [id])
  accountId    Int
  User         User?     @relation(fields: [userId], references: [id])
  userId       Int?
  householdId  Int
}
